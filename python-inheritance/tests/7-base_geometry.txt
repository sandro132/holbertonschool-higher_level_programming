=============================
7-base_geometry.py
=============================

``Write a class BaseGeometry (based on 6-base_geometry.py)``.

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> baseGeometry = BaseGeometry()
    >>> type (baseGeometry)
    <class '7-base_geometry.BaseGeometry'>

    >>> print (baseGeometry) # doctest: +ELLIPSIS
    <7-base_geometry.BaseGeometry object at ...>

    

Methods
=======

    >>> baseGeometry = BaseGeometry()
    >>> print (baseGeometry.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry 
     object at...>>

    >>> baseGeometry.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> print (baseGeometry.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry 
    object at...>>

    >>> baseGeometry.integer_validator("valid number", 1)

    >>> baseGeometry.integer_validator("invalid number", "number")
    Traceback (most recent call last):
    TypeError: invalid number must be an integer

    >>> baseGeometry.integer_validator("another invalid", True)
    Traceback (most recent call last):
    TypeError: another invalid must be an integer

    >>> baseGeometry.integer_validator("invalid tuple", (1,))
    Traceback (most recent call last):
    TypeError: invalid tuple must be an integer

    >>> baseGeometry.integer_validator("and another", [3])
    Traceback (most recent call last):
    TypeError: and another must be an integer

    >>> baseGeometry.integer_validator("more invalid testing", {3, 4})
    Traceback (most recent call last):
    TypeError: more invalid testing must be an integer

    >>> baseGeometry.integer_validator("absolutely every possible invalid", None)
    Traceback (most recent call last):
    ...
    TypeError: absolutely every possible invalid must be an integer

    >>> baseGeometry.integer_validator("invalid int", -1)
    Traceback (most recent call last):
    ...
    ValueError: invalid int must be greater than 0

    >>> baseGeometry.integer_validator("invalid int", 0)
    Traceback (most recent call last):
    ...
    ValueError: invalid int must be greater than 0
 
    >>> baseGeometry.integer_validator({"a": 1}, (1, 2))
    Traceback (most recent call last):
    ...
    TypeError: {'a': 1} must be an integer